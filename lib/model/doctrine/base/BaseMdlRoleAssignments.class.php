<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('MdlRoleAssignments', 'doctrine');

/**
 * BaseMdlRoleAssignments
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $roleid
 * @property integer $contextid
 * @property integer $userid
 * @property integer $hidden
 * @property integer $timestart
 * @property integer $timeend
 * @property integer $timemodified
 * @property integer $modifierid
 * @property string $enrol
 * @property integer $sortorder
 * @property MdlUser $MdlUser
 * @property MdlContext $MdlContext
 * 
 * @method integer            getId()           Returns the current record's "id" value
 * @method integer            getRoleid()       Returns the current record's "roleid" value
 * @method integer            getContextid()    Returns the current record's "contextid" value
 * @method integer            getUserid()       Returns the current record's "userid" value
 * @method integer            getHidden()       Returns the current record's "hidden" value
 * @method integer            getTimestart()    Returns the current record's "timestart" value
 * @method integer            getTimeend()      Returns the current record's "timeend" value
 * @method integer            getTimemodified() Returns the current record's "timemodified" value
 * @method integer            getModifierid()   Returns the current record's "modifierid" value
 * @method string             getEnrol()        Returns the current record's "enrol" value
 * @method integer            getSortorder()    Returns the current record's "sortorder" value
 * @method MdlUser            getMdlUser()      Returns the current record's "MdlUser" value
 * @method MdlContext         getMdlContext()   Returns the current record's "MdlContext" value
 * @method MdlRoleAssignments setId()           Sets the current record's "id" value
 * @method MdlRoleAssignments setRoleid()       Sets the current record's "roleid" value
 * @method MdlRoleAssignments setContextid()    Sets the current record's "contextid" value
 * @method MdlRoleAssignments setUserid()       Sets the current record's "userid" value
 * @method MdlRoleAssignments setHidden()       Sets the current record's "hidden" value
 * @method MdlRoleAssignments setTimestart()    Sets the current record's "timestart" value
 * @method MdlRoleAssignments setTimeend()      Sets the current record's "timeend" value
 * @method MdlRoleAssignments setTimemodified() Sets the current record's "timemodified" value
 * @method MdlRoleAssignments setModifierid()   Sets the current record's "modifierid" value
 * @method MdlRoleAssignments setEnrol()        Sets the current record's "enrol" value
 * @method MdlRoleAssignments setSortorder()    Sets the current record's "sortorder" value
 * @method MdlRoleAssignments setMdlUser()      Sets the current record's "MdlUser" value
 * @method MdlRoleAssignments setMdlContext()   Sets the current record's "MdlContext" value
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseMdlRoleAssignments extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('mdl_role_assignments');
        $this->hasColumn('id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => 8,
             ));
        $this->hasColumn('roleid', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('contextid', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('userid', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('hidden', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('timestart', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('timeend', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('timemodified', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('modifierid', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('enrol', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('sortorder', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('MdlUser', array(
             'local' => 'userid',
             'foreign' => 'id'));

        $this->hasOne('MdlContext', array(
             'local' => 'contextid',
             'foreign' => 'id'));
    }
}