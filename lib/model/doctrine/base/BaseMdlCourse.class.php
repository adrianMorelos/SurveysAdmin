<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('MdlCourse', 'doctrine');

/**
 * BaseMdlCourse
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $category
 * @property integer $sortorder
 * @property string $password
 * @property string $fullname
 * @property string $shortname
 * @property string $idnumber
 * @property string $summary
 * @property string $format
 * @property integer $showgrades
 * @property string $modinfo
 * @property integer $newsitems
 * @property string $teacher
 * @property string $teachers
 * @property string $student
 * @property string $students
 * @property integer $guest
 * @property integer $startdate
 * @property integer $enrolperiod
 * @property integer $numsections
 * @property integer $marker
 * @property integer $maxbytes
 * @property integer $showreports
 * @property integer $visible
 * @property integer $hiddensections
 * @property integer $groupmode
 * @property integer $groupmodeforce
 * @property integer $defaultgroupingid
 * @property string $lang
 * @property string $theme
 * @property string $cost
 * @property string $currency
 * @property integer $timecreated
 * @property integer $timemodified
 * @property integer $metacourse
 * @property integer $requested
 * @property integer $restrictmodules
 * @property integer $expirynotify
 * @property integer $expirythreshold
 * @property integer $notifystudents
 * @property integer $enrollable
 * @property integer $enrolstartdate
 * @property integer $enrolenddate
 * @property string $enrol
 * @property integer $defaultrole
 * @property MdlContext $MdlContext
 * 
 * @method integer    getId()                Returns the current record's "id" value
 * @method integer    getCategory()          Returns the current record's "category" value
 * @method integer    getSortorder()         Returns the current record's "sortorder" value
 * @method string     getPassword()          Returns the current record's "password" value
 * @method string     getFullname()          Returns the current record's "fullname" value
 * @method string     getShortname()         Returns the current record's "shortname" value
 * @method string     getIdnumber()          Returns the current record's "idnumber" value
 * @method string     getSummary()           Returns the current record's "summary" value
 * @method string     getFormat()            Returns the current record's "format" value
 * @method integer    getShowgrades()        Returns the current record's "showgrades" value
 * @method string     getModinfo()           Returns the current record's "modinfo" value
 * @method integer    getNewsitems()         Returns the current record's "newsitems" value
 * @method string     getTeacher()           Returns the current record's "teacher" value
 * @method string     getTeachers()          Returns the current record's "teachers" value
 * @method string     getStudent()           Returns the current record's "student" value
 * @method string     getStudents()          Returns the current record's "students" value
 * @method integer    getGuest()             Returns the current record's "guest" value
 * @method integer    getStartdate()         Returns the current record's "startdate" value
 * @method integer    getEnrolperiod()       Returns the current record's "enrolperiod" value
 * @method integer    getNumsections()       Returns the current record's "numsections" value
 * @method integer    getMarker()            Returns the current record's "marker" value
 * @method integer    getMaxbytes()          Returns the current record's "maxbytes" value
 * @method integer    getShowreports()       Returns the current record's "showreports" value
 * @method integer    getVisible()           Returns the current record's "visible" value
 * @method integer    getHiddensections()    Returns the current record's "hiddensections" value
 * @method integer    getGroupmode()         Returns the current record's "groupmode" value
 * @method integer    getGroupmodeforce()    Returns the current record's "groupmodeforce" value
 * @method integer    getDefaultgroupingid() Returns the current record's "defaultgroupingid" value
 * @method string     getLang()              Returns the current record's "lang" value
 * @method string     getTheme()             Returns the current record's "theme" value
 * @method string     getCost()              Returns the current record's "cost" value
 * @method string     getCurrency()          Returns the current record's "currency" value
 * @method integer    getTimecreated()       Returns the current record's "timecreated" value
 * @method integer    getTimemodified()      Returns the current record's "timemodified" value
 * @method integer    getMetacourse()        Returns the current record's "metacourse" value
 * @method integer    getRequested()         Returns the current record's "requested" value
 * @method integer    getRestrictmodules()   Returns the current record's "restrictmodules" value
 * @method integer    getExpirynotify()      Returns the current record's "expirynotify" value
 * @method integer    getExpirythreshold()   Returns the current record's "expirythreshold" value
 * @method integer    getNotifystudents()    Returns the current record's "notifystudents" value
 * @method integer    getEnrollable()        Returns the current record's "enrollable" value
 * @method integer    getEnrolstartdate()    Returns the current record's "enrolstartdate" value
 * @method integer    getEnrolenddate()      Returns the current record's "enrolenddate" value
 * @method string     getEnrol()             Returns the current record's "enrol" value
 * @method integer    getDefaultrole()       Returns the current record's "defaultrole" value
 * @method MdlContext getMdlContext()        Returns the current record's "MdlContext" value
 * @method MdlCourse  setId()                Sets the current record's "id" value
 * @method MdlCourse  setCategory()          Sets the current record's "category" value
 * @method MdlCourse  setSortorder()         Sets the current record's "sortorder" value
 * @method MdlCourse  setPassword()          Sets the current record's "password" value
 * @method MdlCourse  setFullname()          Sets the current record's "fullname" value
 * @method MdlCourse  setShortname()         Sets the current record's "shortname" value
 * @method MdlCourse  setIdnumber()          Sets the current record's "idnumber" value
 * @method MdlCourse  setSummary()           Sets the current record's "summary" value
 * @method MdlCourse  setFormat()            Sets the current record's "format" value
 * @method MdlCourse  setShowgrades()        Sets the current record's "showgrades" value
 * @method MdlCourse  setModinfo()           Sets the current record's "modinfo" value
 * @method MdlCourse  setNewsitems()         Sets the current record's "newsitems" value
 * @method MdlCourse  setTeacher()           Sets the current record's "teacher" value
 * @method MdlCourse  setTeachers()          Sets the current record's "teachers" value
 * @method MdlCourse  setStudent()           Sets the current record's "student" value
 * @method MdlCourse  setStudents()          Sets the current record's "students" value
 * @method MdlCourse  setGuest()             Sets the current record's "guest" value
 * @method MdlCourse  setStartdate()         Sets the current record's "startdate" value
 * @method MdlCourse  setEnrolperiod()       Sets the current record's "enrolperiod" value
 * @method MdlCourse  setNumsections()       Sets the current record's "numsections" value
 * @method MdlCourse  setMarker()            Sets the current record's "marker" value
 * @method MdlCourse  setMaxbytes()          Sets the current record's "maxbytes" value
 * @method MdlCourse  setShowreports()       Sets the current record's "showreports" value
 * @method MdlCourse  setVisible()           Sets the current record's "visible" value
 * @method MdlCourse  setHiddensections()    Sets the current record's "hiddensections" value
 * @method MdlCourse  setGroupmode()         Sets the current record's "groupmode" value
 * @method MdlCourse  setGroupmodeforce()    Sets the current record's "groupmodeforce" value
 * @method MdlCourse  setDefaultgroupingid() Sets the current record's "defaultgroupingid" value
 * @method MdlCourse  setLang()              Sets the current record's "lang" value
 * @method MdlCourse  setTheme()             Sets the current record's "theme" value
 * @method MdlCourse  setCost()              Sets the current record's "cost" value
 * @method MdlCourse  setCurrency()          Sets the current record's "currency" value
 * @method MdlCourse  setTimecreated()       Sets the current record's "timecreated" value
 * @method MdlCourse  setTimemodified()      Sets the current record's "timemodified" value
 * @method MdlCourse  setMetacourse()        Sets the current record's "metacourse" value
 * @method MdlCourse  setRequested()         Sets the current record's "requested" value
 * @method MdlCourse  setRestrictmodules()   Sets the current record's "restrictmodules" value
 * @method MdlCourse  setExpirynotify()      Sets the current record's "expirynotify" value
 * @method MdlCourse  setExpirythreshold()   Sets the current record's "expirythreshold" value
 * @method MdlCourse  setNotifystudents()    Sets the current record's "notifystudents" value
 * @method MdlCourse  setEnrollable()        Sets the current record's "enrollable" value
 * @method MdlCourse  setEnrolstartdate()    Sets the current record's "enrolstartdate" value
 * @method MdlCourse  setEnrolenddate()      Sets the current record's "enrolenddate" value
 * @method MdlCourse  setEnrol()             Sets the current record's "enrol" value
 * @method MdlCourse  setDefaultrole()       Sets the current record's "defaultrole" value
 * @method MdlCourse  setMdlContext()        Sets the current record's "MdlContext" value
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseMdlCourse extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('mdl_course');
        $this->hasColumn('id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => 8,
             ));
        $this->hasColumn('category', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('sortorder', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('password', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('fullname', 'string', 254, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 254,
             ));
        $this->hasColumn('shortname', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('idnumber', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('summary', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('format', 'string', 10, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => 'topics',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 10,
             ));
        $this->hasColumn('showgrades', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '1',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('modinfo', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('newsitems', 'integer', 3, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '1',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 3,
             ));
        $this->hasColumn('teacher', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => 'Teacher',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('teachers', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => 'Teachers',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('student', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => 'Student',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('students', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => 'Students',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('guest', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('startdate', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('enrolperiod', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('numsections', 'integer', 3, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '1',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 3,
             ));
        $this->hasColumn('marker', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('maxbytes', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('showreports', 'integer', 2, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 2,
             ));
        $this->hasColumn('visible', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '1',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('hiddensections', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('groupmode', 'integer', 2, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 2,
             ));
        $this->hasColumn('groupmodeforce', 'integer', 2, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 2,
             ));
        $this->hasColumn('defaultgroupingid', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('lang', 'string', 30, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 30,
             ));
        $this->hasColumn('theme', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('cost', 'string', 10, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 10,
             ));
        $this->hasColumn('currency', 'string', 3, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => 'USD',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 3,
             ));
        $this->hasColumn('timecreated', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('timemodified', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('metacourse', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('requested', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('restrictmodules', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('expirynotify', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('expirythreshold', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('notifystudents', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('enrollable', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '1',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('enrolstartdate', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('enrolenddate', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('enrol', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('defaultrole', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('MdlContext', array(
             'local' => 'id',
             'foreign' => 'instanceid'));
    }
}